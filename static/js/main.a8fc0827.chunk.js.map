{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ethereum","window","App","useState","account","setAccount","signature","setSignature","web3","Web3","a","request","method","accounts","eth","personal","sign","then","sig","console","log","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oeAIIA,EAAWC,OAAOD,SAgCPE,MA9Bf,WAAe,MAMeC,qBANf,mBAMRC,EANQ,KAMCC,EAND,OAOmBF,qBAPnB,mBAORG,EAPQ,KAOGC,EAPH,KAUTC,EAAO,IAAIC,IAAKT,GAVP,4CAab,4BAAAU,EAAA,sEACyBV,EAASW,QAAQ,CAAEC,OAAQ,wBADpD,OACQC,EADR,OAEER,EAAWQ,EAAS,IACpBL,EAAKM,IAAIC,SAASC,KARN,IAQoBH,EAAS,IAAII,MAAK,SAACC,GAASX,EAAaW,MAH3E,4CAba,sBAmBb,OARAC,QAAQC,IAAIZ,EAAKM,IAAID,UASnB,gCACE,8CACA,gDAAmBT,KACnB,uCAfU,OAgBV,4CAAeE,KACf,wBAAQe,QAzBC,2CAyBT,kCCnBSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a8fc0827.chunk.js","sourcesContent":["import './App.css';\nimport Web3 from 'web3';\nimport { useState } from 'react';\n\nlet ethereum = window.ethereum;\n\nfunction App() {\n  // if (!ethereum) {\n  //   return (\n  //     <p>Please install Metamask</p>\n  //   )\n  // }\n  let [account, setAccount] = useState();\n  let [signature, setSignature] = useState();\n  let refCode = \"a\";\n  \n  let web3 = new Web3(ethereum)\n  console.log(web3.eth.accounts)\n\n  async function connect() {\n    const accounts = await ethereum.request({ method: 'eth_requestAccounts' })\n    setAccount(accounts[0])\n    web3.eth.personal.sign(refCode, accounts[0]).then((sig) => {setSignature(sig)})\n  }  \n\n  return (\n    <div>\n      <h3>Sign message</h3>\n      <p>Hello account: {account}</p>\n      <p>Code: {refCode}</p>\n      <p>signature: {signature}</p>\n      <button onClick={connect}>Connect Metamask</button>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}